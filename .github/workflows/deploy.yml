name: Deploy Node.js mobile with Helm

on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: self-hosted

    steps:
      ## Step 1: Check out the code
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: false

      ## Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      ## Step 3: Install dependencies
      - name: Install dependencies
        working-directory: mobile
        run: |
          sudo apt install npm -y
          npm install

      ## Step 4: Build Docker image
      - name: Build Docker image
        env:
          IMAGE_TAG: v.${{ github.run_number }}  # Use dot as separator for consistency
        run: |
          docker build -t sanjaypramod/nodejs-latest:${{ env.IMAGE_TAG }} -f mobile/Dockerfile mobile

      ## Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      ## Step 6: Push Docker image
      - name: Push Docker image
        env:
          IMAGE_TAG: v.${{ github.run_number }}
        run: |
          docker push sanjaypramod/nodejs-latest:${{ env.IMAGE_TAG }}

      ## Step 7: Update image tag in values.yaml
      - name: Update image tag in values.yaml
        env:
          IMAGE_TAG: v.${{ github.run_number }}
        run: |
          sed -i "s|tag:.*|tag: \"${IMAGE_TAG}\"|" helm/chart/values.yaml

      ## Step 8: Commit updated values.yaml
      - name: Commit updated values.yaml
        env: 
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
        run: |
          git config --global user.name "$GIT_USERNAME"
          git config --global user.email "$GIT_EMAIL"
          git add helm/chart/values.yaml
          git commit -m "Update image tag to ${{ env.IMAGE_TAG }}"
          git pull --rebase https://$PAT_TOKEN@github.com/Sanjaypramod/k3s_deployment.git master
          git push https://$PAT_TOKEN@github.com/Sanjaypramod/k3s_deployment.git HEAD:master

      ## Step 9: Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      ## Step 10: Configure kubectl
      - name: Configure kubectl
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          echo "$KUBECONFIG" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      ## Step 11: Create 'prod' Namespace
      - name: Create prod Namespace
        run: |
          kubectl create namespace prod || echo "Namespace 'prod' already exists"

      ## Step 12: Deploy with Helm to prod Namespace
      - name: Deploy with Helm
        env:
          IMAGE_TAG: v.${{ github.run_number }}  # Ensure same format is used here
        run: |
          sudo helm upgrade --install nodejs-app ./helm/chart \
            --namespace prod \
            --kubeconfig /etc/rancher/k3s/k3s.yaml \
            --set image.repository=sanjaypramod/nodejs-latest \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set revision=${{ github.run_number }}

      ## Step 13: Deploy Grafana with Helm to monitoring Namespace
      - name: Deploy Grafana
        env:
          GRAFANA_NAMESPACE: monitoring
        run: |
          # Add Grafana Helm repository
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          # Create monitoring namespace if it doesn't exist
          kubectl create namespace $GRAFANA_NAMESPACE || echo "Namespace '$GRAFANA_NAMESPACE' already exists"

          # Deploy Grafana with Helm
          helm upgrade --install grafana grafana/grafana \
            --namespace $GRAFANA_NAMESPACE \
            --set persistence.enabled=true \
            --set persistence.size=3Gi \
            --set adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
            --set service.type=NodePort
